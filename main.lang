@primitive("set_metadata")
fn set_metadata<T>(ptr: &T, metadata: usize) -> &[T] {}
@primitive("get_metadata")
fn get_metadata<T>(ptr: &[T]) -> usize {}
@primitive("sizeof")
fn sizeof<T>() -> usize {}
@primitive("typeof")
fn typeof<T>() -> usize {}
@primitive("typename")
fn typename<T>() -> &str {}
@primitive("here")
fn here<T>() -> &str {}
@primitive("here_file")
fn here_file<T>() -> &str {}
@primitive("here_col")
fn here_column<T>() -> usize {}
@primitive("here_row")
fn here_row<T>() -> usize {}
@primitive("breakpoint")
fn breakpoint() {}
@primitive("volatile_read")
fn volatile_read<T>(ptr: &T) -> T {}
@primitive("volatile_write")
fn volatile_read<T>(ptr: &T, val: T) {}
@primitive("copy")
fn copy<T>(src: &T, dst: &T, count: usize);
@primitive("drop")
fn drop<T>(val: T) {}
@primitive("transmute")
fn transmute<Src, Dst>(val: &Src) -> Dst {}
@primitive("drop_unsized")
/// Drops the value pointed to
fn drop_unsized<T>(value: &T) {}
@primitive("forget")
/// Removes the value pointed to from the current scope without calling drop
fn forget<T>(value: T) {}

@lang("memcpy")
extern fn memcpy(dst: &void, src: &void, count: usize);
@lang("exit")
extern fn exit(val: i32);
@lang("panic")
fn panic(reason: &str, additional_data: &void) -> ! {
    println();
    exit(-1);
}
@lang("printf")
@has_trailing()
extern fn printf(str: &[u8]);
@lang("allocate")
extern fn malloc(length: usize) -> &void;
@lang("reallocate")
extern fn realloc(length: usize) -> &void;
@lang("free")
extern fn free(ptr: &void);
@lang("cstrlen")
extern fn strlen(self: &u8) -> usize;
@lang("print")
fn println(str: &str) = printf("%.*s".as_raw(), str.len(), str.as_raw());
@lang("println")
fn println(str: &str) = printf("%.*sn\n".as_raw(), str.len(), str.as_raw());
@lang("str")
struct str {;
    fn len(self: &str) -> usize = get_metadata(self as &[u8]);
    fn as_raw(self: &str) -> &u8 = (self as &[u8]).as_raw();
    fn from_raw(raw: &T) -> &str = slice::from_raw(raw, cstr_len(raw)) as &str;
    fn from_raw_with_length(raw: &T, length: usize) -> &str = slice::from_raw(raw, length) as &str;
}
@lang("slice")
struct slice {;
    fn as_raw<T>(self: &[T]) -> &T = self as &T; // essentially just removes the god damn annoying af metadata
    fn from_raw<T>(ptr: &T, len: usize) -> &[T] = set_metadata(ptr, len);
    fn len<T>(self: &[T]) -> usize = get_metadata(self);
}





fn main() {
    println("hello!!!");
}

