use std::{borrow::Cow, collections::HashMap};

use mira_errors::{Diagnostic, Diagnostics, Severity};
use mira_lexer::{Token, TokenType};
use mira_spans::{Span, Symbol};

use crate::{
    parser::expand::{compute_locs, pat_parser::parse_token_tree},
    tokenstream::BorrowedTokenStream,
};

use super::{
    Macro, MacroMatchError,
    pat_parser::{ParenType, match_paren},
};

struct MacroExpander<'arena> {
    macros: HashMap<Symbol<'arena>, Macro<'arena>>,
}

impl<'arena> MacroExpander<'arena> {
    pub fn expand_macros<'a>(&mut self, tokens: &'a [Token<'arena>]) -> Cow<'a, [Token<'arena>]> {
        Cow::Borrowed(tokens)
    }

    fn parse_macro_def(
        name: Symbol<'arena>,
        // (...pat...) => { ...content... }; repeating
        mut tokens: BorrowedTokenStream<'arena, '_>,
        end_span: Span<'arena>,
        diagnostics: &mut Diagnostics<'arena>,
    ) -> Result<Macro<'arena>, ()> {
        macro_rules! err {
            ($v:expr) => {
                $v.map_err(|v| _ = diagnostics.add_err(v))?
            };
        }

        let mut cases = Vec::new();
        while !tokens.is_at_end() {
            err!(tokens.expect(TokenType::ParenLeft));
            let paren_start_span = tokens.current().span;
            let def = err!(
                match_paren(&mut tokens, ParenType::Paren)
                    .ok_or(MacroMatchError::UnmatchedParen(paren_start_span, end_span))
            );
            let def = parse_token_tree(
                BorrowedTokenStream::new(def, tokens.current().span),
                true,
                diagnostics,
            )?;
            let def = compute_locs(def);
            err!(tokens.expect(TokenType::Equal));
            err!(tokens.expect(TokenType::GreaterThan));
            let body = err!(
                match_paren(&mut tokens, ParenType::Curly)
                    .ok_or(MacroMatchError::UnmatchedParen(paren_start_span, end_span))
            );
            let def = parse_token_tree(
                BorrowedTokenStream::new(def, tokens.current().span),
                true,
                diagnostics,
            )?;
        }
        Ok(Macro { name, cases })
    }
}
