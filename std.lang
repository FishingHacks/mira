extern fn alloc(size: usize) -> &void;
extern fn realloc(ptr: &void, size: usize) -> &void;
extern fn free(ptr: &void);

@lang("allocator_trait")
trait Allocator {
    fn alloc(self: &Self, size: usize) -> &void;
    fn realloc(self: &Self, ptr: &void, size: usize) -> &void;
    fn free(self: &Self, ptr: &void);
}

struct CAlloc {;
    impl Allocator {
        fn alloc(self: &Self, size: usize) -> &void = alloc(size);
        fn realloc(self: &Self, ptr: &void, size: usize) -> &void = realloc(ptr, size);
        fn free(self: &Self, ptr: &void) = free(ptr);
    }
}
@lang("allocator")
let allocator: CAlloc = CAlloc {};

@lang("copy_trait")
trait Copy {}

@lang("clone_trait")
trait Clone {
    fn clone(self: &Self) -> Self;
}

@lang("printf")
extern fn printf(pat: &u8, a: usize, b: &u8);

@lang("eq_trait")
trait Eq {
    fn eq(self: &Self, other: &Self) -> bool;
}

@lang("neq_trait")
trait Neq {
    fn neq(self: &Self, other: &Self) -> bool;
}

struct Test2 {
    test: &Test
}

struct Test {
    value: i32
}

struct Nya {
    meow: i32,
    mreow: u32,
    boop: usize;

    fn new(meow: i32, mreow: u32, boop: usize) -> Nya = Nya { meow: meow, mreow: mreow, boop: boop };
}

let meow: i32 = 12;

fn test() -> Nya = Nya::new(13, 14, 15);
fn test2() -> Nya = Nya { meow: 13, mreow: 3948, boop: 0xff87cd };
