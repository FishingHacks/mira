extern fn malloc(size: usize) -> &void;
extern fn realloc(ptr: &void, size: usize) -> &void;
extern fn free(ptr: &void);

@lang("allocator_trait")
trait Allocator {
    fn alloc(self: &Self, size: usize) -> &void;
    fn realloc(self: &Self, ptr: &void, size: usize) -> &void;
    fn free(self: &Self, ptr: &void);
}

struct CAlloc {;
    impl Allocator {
        fn alloc(self: &Self, size: usize) -> &void = malloc(size);
        fn realloc(self: &Self, ptr: &void, size: usize) -> &void = realloc(ptr, size);
        fn free(self: &Self, ptr: &void) = free(ptr);
    }
}
@lang("allocator")
let allocator: CAlloc = CAlloc {};

@lang("copy_trait")
trait Copy {}

@lang("clone_trait")
trait Clone {
    fn clone(self: &Self) -> Self;
}

@lang("printf")
@ext_vararg()
extern fn printf(pat: &u8);

@lang("eq_trait")
trait Eq {
    fn eq(self: &Self, other: &Self) -> bool;
}

@lang("neq_trait")
trait Neq {
    fn neq(self: &Self, other: &Self) -> bool;
}

struct Test2 {
    test: &Test
}

struct Test {
    value: i32
}

struct Nya {
    meow: i32,
    mreow: u32,
    boop: usize;

    fn new(meow: i32, mreow: u32, boop: usize) -> Nya = Nya { meow: meow, mreow: mreow, boop: boop };
}

let meow: i32 = 12;
let meowmeow: &str = "fdkjghdafhgjkdsfg";

fn test() -> Nya = Nya::new(13, 14, 15);
fn test2() -> Nya = Nya { meow: 13, mreow: 3948, boop: 0xff87cd };
fn test3(v: &Nya) -> &u32 = &v.mreow;
fn test4(v: [Nya; 5], idx: usize) -> Nya = v[idx];
fn test5(v: &[Nya]) -> usize = v[2].boop;

fn test6() -> &[&u8] = &[&3, &4];
fn test7(v: &[&[u8]], a: usize, b: usize) -> u8 = v[a][b];
fn test8() -> &str = "abcdefg :3";
fn test9() -> i32 = woof(12);

extern fn main(argc: usize, argv: &&u8) {
    let v = [test2(), test2(), test2(), test2(), test2()];
    // turn argv of &&u8 into &&str into &[&str] where the size is argc
    printf("got %d arguments\n\0" as &u8, argc);
    let value = test9();
    printf("value of test9: %d\n\0" as &u8, value);
    let value2 = test4(v, 3);
    let value3 = test3(&value2);
    printf("value of test 3 and test 4 is: %d\n\0" as &u8, *value3);
}

use "test"::woof;
