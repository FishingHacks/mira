//! # Mira Standard Library
//!
//! Standard library for mira. Here is where all the intrinsics and lang items live too. (compiler internals yippieeee)

pub mod allocate;
pub mod clone_copy;
pub mod intrinsics;
pub mod langitems;
pub mod os;
pub mod panicking;
mod start;

pub use clone_copy::Clone;
pub use clone_copy::Copy;
use os::write;
pub use langitems::print_u64;
pub use langitems::print_i64;
pub use panicking::panic;

/// Prints `string` to stdout
pub fn print_str(string: &str) = write(1, string as &u8, string.len());
/// Prints the character `c` to stdout
pub fn print_char(c: u8) = write(1, &c, 1);
/// Prints a newliine to stdout
pub fn print_newline() = print_char(0xa);
/// Prints `string` with a newline (`\n`) to stdout
pub fn print_str_newline(string: &str) {
    print_str(string);
    print_newline();
}

/// Gets the length of a c string
pub fn cstrlen(cstr: &u8) -> usize {
    let len = 0usize;
    while (*cstr != 0) {
        len += 1;
        cstr = (cstr as &void as usize + 1) as &void as &u8;
    }
    return len;
}
/// Prints a u64 as a hex literal
pub fn print_u64_hex(val: u64) {
    print_str("0x");
    if (val == 0) {
        return print_str("0");
    }
    let chars: [u8; 16] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let char_idx = 0usize;

    while (val > 0) {
        let v = (val & 0xf) as u8;
        if (v < 10) chars[char_idx] = v + 48; // 48 = '0'
        else chars[char_idx] = v - 10 + 97; // 97 = 'a'
        val = val >> 4;
        char_idx += 1;
    }

    while (char_idx > 0) {
        char_idx -= 1;
        print_char(chars[char_idx]);
    }
}
