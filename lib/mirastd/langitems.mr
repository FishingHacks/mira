use "./lib.mr"::{print_str, print_char, print_newline};
use "./intrinsics.mr"::get_metadata;

pub fn print_u64(val: u64) {
    if (val == 0) {
        return print_str("0");
    }
    let chars: [u8; 20] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let char_idx = 0usize;

    while (val > 0) {
        chars[char_idx] = (val % 10) as u8 + 48; // 48 = '0'
        val = val / 10;
        char_idx += 1;
    }

    while (char_idx > 0) {
        char_idx -= 1;
        print_char(chars[char_idx]);
    }
}
pub fn print_i64(val: i64) {
    if (val == 0) {
        return print_str("0");
    }
    let chars: [u8; 20] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let char_idx = 0usize;
    let is_neg = val < 0;
    if (is_neg) val = -val;
    while (val > 0) {
        chars[char_idx] = (val % 10) as u8 + 48; // 48 = '0'
        val = val / 10;
        char_idx += 1;
    }

    if (is_neg) print_char(45); // b'-'
    while (char_idx > 0) {
        char_idx -= 1;
        print_char(chars[char_idx]);
    }
}



@lang("u8")
struct u8_t {;
    fn print(self: u8) = print_u64(self as u64);
    fn println(self: u8) { print_u64(self as u64); print_newline(); }
}
@lang("u16")
struct u16_t {;
    fn print(self: u16) = print_u64(self as u64);
    fn println(self: u16) { print_u64(self as u64); print_newline(); }
}
@lang("u32")
struct u32_t {;
    fn print(self: u32) = print_u64(self as u64);
    fn println(self: u32) { print_u64(self as u64); print_newline(); }
}
@lang("u64")
struct u64_t {;
    fn print(self: u64) = print_u64(self);
    fn println(self: u64) { print_u64(self); print_newline(); }
}
@lang("usize")
struct usize_t {;
    fn print(self: usize) = print_u64(self as u64);
    fn println(self: usize) { print_u64(self as u64); print_newline(); }
}

@lang("i8")
struct i8_t {;
    fn print(self: i8) = print_i64(self as i64);
    fn println(self: i8) { print_i64(self as i64); print_newline(); }
}
@lang("i16")
struct i16_t {;
    fn print(self: i16) = print_i64(self as i64);
    fn println(self: i16) { print_i64(self as i64); print_newline(); }
}
@lang("i32")
struct i32_t {;
    fn print(self: i32) = print_i64(self as i64);
    fn println(self: i32) { print_i64(self as i64); print_newline(); }
}
@lang("i64")
struct i64_t {;
    fn print(self: i64) = print_i64(self);
    fn println(self: i64) { print_i64(self); print_newline(); }
}
@lang("isize")
struct isize_t {;
    fn print(self: isize) = print_i64(self as i64);
    fn println(self: isize) { print_i64(self as i64); print_newline(); }
}
@lang("bool")
struct bool_t {;
    fn print(self: bool) { if (self) print_str("true"); else print_str("false"); }
    fn println(self: bool) { if (self) print_str("true\n"); else print_str("false\n"); }
}
@lang("str")
struct str_t {;
    fn print(self: &str) = print_str(self);
    fn println(self: &str) { print_str(self); print_newline(); }
    fn len(self: &str) -> usize = get_metadata<str>(self);
}
