use "./lib.mr"::{print_u64_hex, cstrlen};
use "./os.mr"::write;

struct unw_cursor { inner: [u64; 127] }
struct unw_context { inner: [u64; 121] }
let UNW_REG_IP: u32 = 16;

@alias("_Ux86_64_getcontext")
extern fn unw_getcontext(v: &unw_context);
@alias("_Ux86_64_init_local")
extern fn unw_init_local(cursor: &unw_cursor, v: &unw_context);
@alias("_Ux86_64_step")
extern fn unw_step(cursor: &unw_cursor) -> i32;
@alias("_Ux86_64_get_reg")
extern fn unw_get_reg(cursor: &unw_cursor, register: u32, value: &usize);
@alias("_Ux86_64_get_proc_name")
extern fn unw_get_proc_name(cursor: &unw_cursor, name: &u8, name_size: usize, offset: &usize) -> i32;

pub fn show_bt() {
    let cursor = unw_cursor { inner: [0u64; 127] };
    let context = unw_context { inner: [0u64; 121] };
    let ip = 0usize;
    let offset = 0usize;

    unw_getcontext(&context);
    unw_init_local(&cursor, &context);
    let name_buf = [0u8; 4096];
    while (unw_step(&cursor) > 0) {
        unw_get_reg(&cursor, UNW_REG_IP, &ip);
        print_u64_hex(ip as u64);
        ": ".print();
        name_buf[0] = 0;
        if (unw_get_proc_name(&cursor, &name_buf as &[u8] as &u8, 4096, &offset) == 0) {
            "(".print();
            write(1, &name_buf as &[u8] as &u8, cstrlen(&name_buf as &[u8] as &u8));
            "+".print();
            print_u64_hex(offset as u64);
            ")".println();
        } else "-- no symbol name was found".println();
    }
}

pub fn panic(message: &str) {
    "panic: ".print();
    message.println();
    "".println();
    show_bt();
}
